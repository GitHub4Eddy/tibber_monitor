{"name":"Tibber Monitor","type":"com.fibaro.multilevelSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_1382"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_1382"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"token","type":"string","value":"476c477d8a039529478ebd690d35ddd80e3308ffc49b59c65b142321aee963a4"},{"name":"homeNr","type":"string","value":"1"},{"name":"extraCost","type":"string","value":"0.3649"},{"name":"interval","type":"string","value":"930"},{"name":"httpTimeout","type":"string","value":"5"},{"name":"debugLevel","type":"string","value":"1"},{"name":"setGlobalVar","type":"string","value":"true"},{"name":"setPercentage","type":"string","value":"average"},{"name":"setEnergyPanel","type":"string","value":"false"},{"name":"forNextHour","type":"string","value":"12"},{"name":"workaroundE01","type":"string","value":0.778},{"name":"workaroundC01","type":"string","value":0.106012225},{"name":"workaroundPnn","type":"string","value":1.4223},{"name":"workaroundP23","type":"string","value":0.3912}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP Tibber Monitor\n\n-- This QuickApp gets todays and tomorrows energy prices and energy consumption from the Tibber platform. \n-- Next to the current prices the lowest, highest and average price for the next hours is calculated.\n-- Tax and extra cost (cable owner) are included in the hourly, daily, monthly, yearly and total cost.  \n-- All values are displayed in the labels. \n-- The Energy Panel is updated with the hourly prices and energy consumption. \n-- Child devices are available for:\n   -- Hourly Energy \n   -- Hourly Cost\n   -- Daily Energy  \n   -- Daily Cost (including extra cost)\n   -- Monthly Energy \n   -- Monthly Cost\n   -- Yearly Energy \n   -- Yearly Cost\n   -- Total Energy (com.fibaro.energyMeter with automatic rateType=consumption for Fibaro Energy Panel)\n   -- Total Cost\n   -- Current Price\n   -- Minimum Price (of the next [forNextHour] hours)\n   -- Maximum Price (of the next [forNextHour] hours)\n   -- Average Price (calculated over the current prices and the next 10 prices)\n   -- Percentage +0 hour (positive value means an increase of the price, negative value means a decrease of the price)\n   -- Percentage +1 hour \n   -- Percentage +2 hour\n   -- Percentage +3 hour\n   -- Percentage +4 hour\n   -- Percentage +5 hour\n   -- Percentage +6 hour\n   -- Percentage +7 hour\n   -- Percentage +8 hour\n   -- Percentage +9 hour\n   -- Percentage +10 hour\n-- These devices can be used to control appliances according to the lowest and forecast prices during the day. \n\n-- For easy use in for example blockscenes, Global Variables are available for:\n   -- Current Price Level (NORMAL, CHEAP, VERY CHEAP, EXPENSIVE, VERY EXPENSIVE)\n   -- Level +0 +1 +2 +3 +3 +4 +5 +6 +7 +8 +9 +10 hour (NORMAL, CHEAP, VERY CHEAP, EXPENSIVE, VERY EXPENSIVE)\n\n\n-- To communicate with the API you need to acquire a OAuth access token and pass this along with every request passed to the server.\n-- A Personal Access Token give you access to your data and your data only. \n-- This is ideal for DIY people that want to leverage the Tibber platform to extend the smartness of their home. \n-- Such a token can be acquired here: https://developer.tibber.com\n\n-- When creating your access token or OAuth client you’ll be asked which scopes you want the access token to be associated with. \n-- These scopes tells the API which data and operations the client is allowed to perfom on the user’s behalf. \n-- The scopes your app requires depend on the type of data it is trying to request. \n-- If you for example need access to user information you add the USER scope. \n-- If information about the users homes is needed you add the appropiate HOME scopes.\n\n-- Tomorrow values are available from 13:00 hour\n-- If you have more than one home in your subscription, you need to fill in your home number the change between your homes. \n\n-- Use this QuickApp at your own risk. You are responsible for ensuring that the information provided via this QuickApp do not contain errors. \n-- Tibber is a registered trademark being the property of TIBBER. TIBBER reserves all rights to the registered trademarks.\n-- Information which is published on TIBBER’s websites belongs to TIBBER or is used with the permission of the rights holder. \n-- Making of copies, presentations, distribution, display or any other transfer of the information on the website to the public is, except for strictly private use, prohibited unless done with the consent of TIBBER. \n-- Published material on dedicated TIBBER press websites, intended for public use, is exempt from the consent requirement.\n-- Also see: https://tibber.com/en/legal-notice\n\n-- Price levels are based on trailing price average (3 days for hourly values and 30 days for daily values)\n   -- NORMAL - The price is greater than 90 % and smaller than 115 % compared to average price.\n   -- CHEAP - The price is greater than 60 % and smaller or equal to 90 % compared to average price.\n   -- VERY CHEAP -\tThe price is smaller or equal to 60 % compared to average price.\n   -- EXPENSIVE - The price is greater or equal to 115 % and smaller than 140 % compared to average price.\n   -- VERY EXPENSIVE\t- The price is greater or equal to 140 % compared to average price.\n\n-- Tibber API documentation: https://developer.tibber.com/docs/guides/calling-api\n-- Tibber API explorer: https://developer.tibber.com/explorer\n\n\n-- Changes version 2.0 (25th May 2022)\n-- Changed the device for the energy panel from the Daily Energy to the Total Energy child device. Because Tibber reports always the past hour at the start of the new hour (so always too late) and the Energy panel and the Daily Energy child devices both resets at midnight and the Total Energy child device doesn't resets, that prevents the last hour from not getting into the energy panel. Thanks to @JcBorgs for analysing and testing. \n-- Added workaround with the help of @JcBorgs for a Tibber API bug in 00-01 hour consumption (energy and cost can change to \"null\" during the day) \n-- Added workaround for empty Tibber responses between 00:00 and 00:05 hour with help of @JcBorgs\n-- Added insert of hour-1 price in Energy Panel (can be turned on or off) with help of @JcBorgs\n-- Changed the name of all child devices Percentage to dynamic names like \"At hour 16:00\", \"At hour 17:00\", etc. with  help of @jgab and @JcBorgs\n-- Changed handling of no response from Tibber\n-- Removed user defined icon (not necessary anymore)\n\n\n-- Changes version 1.3 (6th February 2022)\n-- For easy use in blockscenes added Global Variables for the levels (CHEAP, etc) for the current price and percentages +0, +1, +2, +3, +4, +5, +6, +7, +8, +9 and +10 hour. (Activate the global variables with the QuickApp Variable setGlobalVar = true)\n-- Added an extra Child Device for Percentage +0 hour (current hour)\n-- Added QuickApp Variable setPercentage to setup the calculation of the percentages from \"average\" price or from \"current\" price\n-- Changed the caluclation of the percentages according to the setting in setPercentage, \"average\" or \"current\" price\n-- Limited the calculation of the average price to the current price and the next 10 prices (in line with the child devices +0, +1 ... +10)\n-- Added a minimum and maximum to forNextHour of 12 and 35 hours prices \n\n-- Changes version 1.2 (2nd February 2022) \n-- Solved a nasty bug with the percentage in the labels for tomorrow prices\n-- Added extra child devices for percentage +6 +7 +8 +9 +10 hour\n\n-- Changes version 1.1 (29th January 2022)\n-- Added average price calculation and child device (made by Fibaro forum member drzordz)\n-- Added QuickApp variable to setup amount of hours to show the next prices (made by Fibaro forum member drzordz)\n\n-- Changes version 1.0 (8th Januari 2022)\n-- Reduced max and min price and percentage to two decimals digits \n-- Solved issue with empty hourly energy\n-- Added the prices to the log text of the child devices +1 +2 +3 +4 +5\n-- Added percentages to the hourly prices in the labels\n-- Added percentages to the minimum and maximum prices in the labels\n-- Changed the abreviation to the latest moment (display in properties and labels) to get the (theoretical) most accureate calculation\n-- Changed the default interval to 930 seconds to update more often and have less issues in case Tibber doesn't respond\n\n-- Changes version 0.6 (1st January 2022)\n-- Solved bug that didn't cleaned up the labels \n\n-- Changes version 0.5 (1st January 2021)\n-- Changed main device to generic.device\n-- Changed Tax calculations\n-- Added child devices monthly and total energy and cost\n-- Calculated the daily, monthly, yearly and total energy, cost and tax to get this day, this month, this year and total values\n-- Solved a bug showing more than 12 prices just after midnight\n-- Solved handling nil values at beginning of year, etc\n\n-- Changes version 0.3 (30th December 2021)\n-- Added quickapp variable homeNr to select which home if you have more than one in your subscription\n\n-- Changes version 0.2 (29th December 2021)\n-- Added all child devices\n-- Added QuickApp variable for extra cost and added the cost to the calculations\n-- Replaced \"null\" values in response to prevent errors\n-- Limited values to next 12 hours\n\n-- Changes version 0.1 (23rd December 2021)\n-- Initial version\n\n\n-- Variables (mandatory and created automatically): \n-- token = Authorization token (see the Tibber website: https://developer.tibber.com)\n-- homeNr = Tibber home (nodes) number if you have more than one home (default = 1)\n-- extraCost = Extra cost per kWh for Tibber and Cable owner, decimals with dot, not komma (default = 0)\n-- interval = Interval in seconds to get the data from the Tibber Platform. The QuickApp should run at least once an hour. The default is 930 seconds (15 minutes and 30 seconds). (Tibber has a rate limit of 100 requests in 5 minutes per IP address)\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n-- setGlobalVar = true or false, whether you want to use the Global Variables (default = false)\n-- setPercentage = current or average, whether you want to relate to the average price or current price for the percentage calculation (default = average)\n-- setEnergyPanel = inserting prices in Energy Panel (default = false)\n-- forNextHour = How many hours forward it will show the prices in the labels (default = 12, minimum = 12, maximum = 35)\n-- workaroundE01 = Stores the value of the 00-01 hour energy for a Tibber API bug workaround (default = 0)\n-- workaroundC01 = Stores the value of the 00-01 hour cost for a Tibber API bug workaround (default = 0)\n-- workaroundPnn = Stores the hour-1 price for the Energy Panel (default = 0)\n-- workaroundP23 = Stores the 23h price for the Energy Panel (default = 0)\n\n\n-- No editing of this code is needed \n\n\n-- Child Devices\n\nclass 'hEnergy'(QuickAppChild)\nfunction hEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction hEnergy:updateValue(data) \n  self:updateProperty(\"value\", data.hEnergy)\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'hCost'(QuickAppChild)\nfunction hCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction hCost:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.hCost+(extraCost*data.hEnergy))))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", string.format(\"%.2f\",data.hCost) ..\" + \" ..string.format(\"%.2f\",extraCost*data.hEnergy))\nend\n\nclass 'dEnergy'(QuickAppChild) \nfunction dEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction dEnergy:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.dEnergy)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'dCost'(QuickAppChild)\nfunction dCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction dCost:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.dCost+(extraCost*data.dEnergy))))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", string.format(\"%.2f\",data.dCost) ..\" + \" ..string.format(\"%.2f\",extraCost*data.dEnergy))\nend\n\nclass 'mEnergy'(QuickAppChild)\nfunction mEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction mEnergy:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.mEnergy)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'mCost'(QuickAppChild)\nfunction mCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction mCost:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.mCost+(extraCost*data.mEnergy))))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", string.format(\"%.2f\",data.mCost) ..\" + \" ..string.format(\"%.2f\",extraCost*data.mEnergy))\nend\n\nclass 'yEnergy'(QuickAppChild)\nfunction yEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction yEnergy:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.yEnergy)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'yCost'(QuickAppChild)\nfunction yCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction yCost:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.yCost+(extraCost*data.yEnergy))))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", string.format(\"%.2f\",data.yCost) ..\" + \" ..string.format(\"%.2f\",extraCost*data.yEnergy))\nend\n\nclass 'tEnergy'(QuickAppChild) -- Device for Energy Panel\nfunction tEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n    self:updateProperty(\"rateType\", \"consumption\")\n    self:warning(\"Changed rateType interface of Total Energy child device (\" ..self.id ..\") to consumption\")\n  end\nend\nfunction tEnergy:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.tEnergy)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'tCost'(QuickAppChild)\nfunction tCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction tCost:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.tCost+(extraCost*data.tEnergy))))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", string.format(\"%.2f\",data.tCost) ..\" + \" ..string.format(\"%.2f\",extraCost*data.tEnergy))\nend\n\nclass 'hPrice'(QuickAppChild)\nfunction hPrice:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction hPrice:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.tPrice)))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", \"(\" ..data.level ..\")\")\nend\n\nclass 'minPrice'(QuickAppChild)\nfunction minPrice:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction minPrice:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.minPrice)))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", data.minStartsAt ..\" (\" ..data.minLevel ..\")\")\nend\n\nclass 'maxPrice'(QuickAppChild)\nfunction maxPrice:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction maxPrice:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.maxPrice)))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", data.maxStartsAt ..\" (\"..data.maxLevel ..\")\")\nend\n\nclass 'averagePrice'(QuickAppChild)\nfunction averagePrice:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction averagePrice:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",data.averagePrice)))\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'h0Percentage'(QuickAppChild)\nfunction h0Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h0Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[1].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[1].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[1].hour)\nend\n\nclass 'h1Percentage'(QuickAppChild)\nfunction h1Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h1Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[2].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[2].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[2].hour)\nend\n\nclass 'h2Percentage'(QuickAppChild)\nfunction h2Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h2Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[3].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[3].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[3].hour)\nend\n\nclass 'h3Percentage'(QuickAppChild)\nfunction h3Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h3Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[4].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[4].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[4].hour)\nend\n\nclass 'h4Percentage'(QuickAppChild)\nfunction h4Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h4Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[5].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[5].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[5].hour)\nend\n\nclass 'h5Percentage'(QuickAppChild)\nfunction h5Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h5Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[6].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[6].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[6].hour)\nend\n\nclass 'h6Percentage'(QuickAppChild)\nfunction h6Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h6Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[7].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[7].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[7].hour)\nend\n\nclass 'h7Percentage'(QuickAppChild)\nfunction h7Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h7Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[8].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[8].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[8].hour)\nend\n\nclass 'h8Percentage'(QuickAppChild)\nfunction h8Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h8Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[9].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[9].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[9].hour)\nend\n\nclass 'h9Percentage'(QuickAppChild)\nfunction h9Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h9Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[10].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[10].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[10].hour)\nend\n\nclass 'h10Percentage'(QuickAppChild)\nfunction h10Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h10Percentage:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.2f\",jsonPrices[11].percentage)))\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", string.format(\"%.4f\",jsonPrices[11].total) ..\" \" ..data.currency)\n  self:setName(\"At hour \"..jsonPrices[11].hour)\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp functions\n\n\nfunction QuickApp:updateChildDevices() -- Update Child Devices\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data) \n  end\nend\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:setGlobalVariable(tag,res) -- Fill the Global Variables\n  if setGlobalVar then \n    if api.get(\"/globalVariables/\"..tag) == nil then\n      local responseData, status = api.post(\"/globalVariables/\",{value=(json.encode(res)),name=tag})\n      self:trace(\"Global Variable created: \" ..tag ..\" / status: \" ..status) \n    else\n      local responseData, status = api.put(\"/globalVariables/\"..tag,{value=(json.encode(res))})\n    end\n  else\n    if api.get(\"/globalVariables/\"..tag) then\n      self:deleteGlobalVariable(tag) -- If the Global Variables exists and you don't want them, delete them\n    end\n  end\nend\n\n\nfunction QuickApp:deleteGlobalVariable(tag) -- Delete the Global Variables\n   local responseData, status = api.delete(\"/globalVariables/\"..tag) \n   self:trace(\"Global Variable deleted: \" ..tag ..\" / status: \" ..status)\nend\n\n\nfunction QuickApp:updateEnergyPanel(price) -- Update the Energy Panel price\n  if setEnergyPanel then -- Insert prices in Energy Panel only if turned on\n    self:logging(3,\"updateEnergyPanel\")\n    local billingTariff = api.get(\"/energy/billing/tariff\") -- Get the current Tariff from the Energy Panel\n    billingTariff.rate = price -- Update data with current (previous hour) kWh price\n    local responseData, status = api.put(\"/energy/billing/tariff\", billingTariff) -- Write the new Tariff in the Energy Panel\n  end\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:logging(3,\"updateProperties\")\n  --self:updateProperty(\"value\", 0) -- For future use\n  --self:updateProperty(\"unit\", \"\") -- For future use\n  self:updateProperty(\"log\", data.startsAt)\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  self:logging(3,\"updateLabels\")\n\n  local labelText = \"\"\n  if debugLevel == 4 then\n    labelText = labelText ..\"SIMULATION MODE\" ..\"\\n\\n\"\n  end\n\n  labelText = labelText ..\"Hourly Energy: \" ..string.format(\"%.2f\",data.hEnergy) ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.hCost+(extraCost*data.hEnergy)) ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Daily Energy: \" ..string.format(\"%.2f\",data.dEnergy) ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.dCost+(extraCost*data.dEnergy)) ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Monthly Energy: \" ..string.format(\"%.2f\",data.mEnergy) ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.mCost+(extraCost*data.mEnergy)) ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Yearly Energy: \" ..string.format(\"%.2f\",data.yEnergy) ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.yCost+(extraCost*data.yEnergy))  ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Total Energy: \" ..string.format(\"%.2f\",data.tEnergy) ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.tCost+(extraCost*data.tEnergy))  ..\" \" ..data.currency ..\"\\n\\n\"\n\n  labelText = labelText ..\"Actual Price: \" ..string.format(\"%.4f\",data.tPrice) ..\" \" ..data.currency ..\" per kWh (\" ..data.level ..\")\" ..\"\\n\"\n  labelText = labelText ..\"Energy: \" ..string.format(\"%.4f\",data.gPrice) ..\" \" ..data.currency ..\" / Tax: \" ..string.format(\"%.2f\",data.tax) ..\" Cost: \" ..string.format(\"%.2f\",extraCost) ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Starts at: \" ..data.startsAt ..\"\\n\\n\"\n\n  labelText = labelText ..\"Minimum: \" ..string.format(\"%.4f\",data.minPrice) ..\" \" ..data.currency ..\" (\" ..data.minPercentage ..\"%) at: \" ..data.minStartsAt ..\" (\" ..data.minLevel ..\")\" ..\"\\n\"\n  labelText = labelText ..\"Maximum: \" ..string.format(\"%.4f\",data.maxPrice) ..\" \" ..data.currency ..\" (\" ..data.maxPercentage ..\"%) at: \" ..data.maxStartsAt ..\" (\" ..data.maxLevel ..\")\" ..\"\\n\"\n  labelText = labelText ..\"Average: \" ..string.format(\"%.4f\",data.averagePrice)  ..\" \" ..data.currency ..\"\\n\\n\"\n\n  for n in pairs(jsonPrices or {}) do\n    labelText = labelText ..\"Price: \" ..string.format(\"%.4f\",jsonPrices[n].total) ..\" \" ..data.currency ..\" (\" ..jsonPrices[n].percentage ..\"%) at: \" ..jsonPrices[n].hour ..\" (\" ..jsonPrices[n].level ..\")\" ..\"\\n\"\n  end\n\n  self:updateView(\"label1\", \"text\", labelText)\n  self:logging(2,\"Label1: \" ..labelText)\nend\n\n\nfunction QuickApp:getValuesTotal() -- Get Total values from json file \n  self:logging(3,\"getValuesTotal\")\n  data.tEnergy = 0\n  data.tCost = 0\n  for year in pairs(jsonTable.data.viewer.homes[homeNr].yearly.nodes or {}) do -- Sum all years energy\n    self:logging(3,\"year: \" ..tostring(year))\n    data.tEnergy = data.tEnergy + tonumber(jsonTable.data.viewer.homes[homeNr].yearly.nodes[year].consumption)\n    data.tCost = data.tCost + tonumber(jsonTable.data.viewer.homes[homeNr].yearly.nodes[year].cost)\n  end\n  data.tEnergy = tonumber(data.tEnergy + data.yEnergy) -- Add last year values\n  data.tCost = tonumber(data.tCost + data.yCost)\n  self:logging(3,\"data.tEnergy: \" ..tostring(data.tEnergy) ..\" data.tCost: \" ..tostring(data.tCost))\nend\n\n\nfunction QuickApp:getValuesYearly() -- Get Yearly values from json file \n  self:logging(3,\"getValuesYearly\")\n  data.yEnergy = 0\n  data.yCost = 0\n  for month in pairs(jsonTable.data.viewer.homes[homeNr].monthly.nodes or {}) do -- Sum all months energy of the year\n    self:logging(3,\"month: \" ..tostring(month))\n    data.yEnergy = data.yEnergy + tonumber(jsonTable.data.viewer.homes[homeNr].monthly.nodes[month].consumption)\n    data.yCost = data.yCost + tonumber(jsonTable.data.viewer.homes[homeNr].monthly.nodes[month].cost)\n  end\n  data.yEnergy = tonumber(data.yEnergy + data.mEnergy) -- Add last month values\n  data.yCost = tonumber(data.yCost + data.mCost)\n  self:logging(3,\"data.yEnergy: \" ..tostring(data.yEnergy) ..\" data.yCost: \" ..tostring(data.yCost))\nend\n\n\nfunction QuickApp:getValuesMonthly() -- Get Monthly values from json file \n  self:logging(3,\"getValuesMonthly\")\n  data.mEnergy = 0\n  data.mCost = 0\n  for day in pairs(jsonTable.data.viewer.homes[homeNr].daily.nodes or {}) do -- Sum all days energy of the month\n    self:logging(3,\"day: \" ..tostring(day))\n    data.mEnergy = data.mEnergy + tonumber(jsonTable.data.viewer.homes[homeNr].daily.nodes[day].consumption)\n    data.mCost = data.mCost + tonumber(jsonTable.data.viewer.homes[homeNr].daily.nodes[day].cost)\n  end\n  data.mEnergy = tonumber(data.mEnergy + data.dEnergy) -- Add last days values\n  data.mCost = tonumber(data.mCost + data.dCost)\n  self:logging(3,\"data.mEnergy: \" ..tostring(data.mEnergy) ..\" data.mCost: \" ..tostring(data.mCost))\nend\n\n\nfunction QuickApp:getValuesDaily() -- Get Daily values from json file \n  self:logging(3,\"getValuesDaily\")\n  data.dEnergy = 0\n  data.dCost = 0\n  data.hEnergy = 0\n  data.hCost = 0\n  local loopCheck = 0\n  for hour in pairs(jsonTable.data.viewer.homes[homeNr].hourly.nodes or {}) do  -- Sum all hours energy of the day\n    loopCheck = 1 -- Set loopCheck to 1 to know the loop worked (probably not between 00:00 and 01:00 because of an empty jsonTable.data.viewer.homes[homeNr].hourly.nodes)\n    self:logging(3,\"hour: \" ..tostring(hour))\n    if hour == 1 then -- Workaround check for null value 00-01 hour consumption\n      if jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption == 0 then\n        self:logging(3, \"Energy consumption (==0): \" ..tostring(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption) ..\" (hour: \" ..hour ..\")\")\n        data.dEnergy = tonumber(self:getVariable(\"workaroundE01\")) -- Use workaround value 00-01 hour energy\n        data.dCost = tonumber(self:getVariable(\"workaroundC01\")) -- Use workaround value 00-01 hour cost\n        self:logging(2,\"Got null value from Tibber API for 00-01 hour energy and cost, using stored values instead\")\n      else -- No null value 00-01 hour, use the value from the Tibber API and set workaround value 00-01 hour consumption\n        self:logging(3, \"Energy consumption (<>0): \" ..tostring(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption) ..\" (hour: \" ..hour ..\")\")\n        data.dEnergy = tonumber(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption) \n        data.dCost = tonumber(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].cost)\n        self:setVariable(\"workaroundE01\",jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption) \n        self:setVariable(\"workaroundC01\",jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].cost) \n      end\n    else -- Not 00-01 hour, no workaround check necessary \n      self:logging(3, \"Energy consumption (not 00-01 hour): \" ..tostring(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption) ..\" (hour: \" ..hour ..\")\")\n      data.dEnergy = data.dEnergy + tonumber(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption)\n      data.dCost = data.dCost + tonumber(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].cost)\n    end\n    data.hEnergy = tonumber(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].consumption) or 0\n    data.hCost = tonumber(jsonTable.data.viewer.homes[homeNr].hourly.nodes[hour].cost) or 0\n  end\n  if loopCheck == 0 then -- It is just after midnight, there was no loop, workaroundE01 and workaroundC01 needs to be reset to zero\n    self:setVariable(\"workaroundE01\",\"0\")\n    self:setVariable(\"workaroundC01\",\"0\")\n  end\n  self:logging(2, \"workaroundE01: \" ..self:getVariable(\"workaroundE01\") ..\" workaroundC01: \" ..self:getVariable(\"workaroundC01\") ..\" data.hEnergy: \" ..tostring(data.hEnergy) ..\" data.hCost: \" ..tostring(data.hCost) ..\" data.dEnergy: \" ..tostring(data.dEnergy) ..\" data.dCost: \" ..tostring(data.dCost))\nend\n\n\nfunction QuickApp:getValues() -- Get the values from json file \n  self:logging(3,\"getValues\")\n  \n  jsonPrices = {}\n  self:getValuesDaily()\n  self:getValuesMonthly()\n  self:getValuesYearly()\n  self:getValuesTotal()\n  \n  data.tPrice =   tonumber(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.current.total)\n  data.gPrice =   tonumber(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.current.energy)\n  data.tax =      tonumber(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.current.tax)\n  data.currency = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.current.currency\n  data.level =    jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.current.level:gsub(\"_\", \" \") \n  data.startsAt = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.current.startsAt\n  \n  self:setGlobalVariable(\"tibber_currentLevel_\"..plugin.mainDeviceId,data.level) -- Set global variable for current level\n  \n  local pattern = \"(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+).(%d+)+(%d+):(%d+)\" --2021-12-23T17:00:00.000+01:00\n  local runyear, runmonth, runday, runhour, runminute, runseconds = data.startsAt:match(pattern)\n  local convertedTimestamp = os.time({year = runyear, month = runmonth, day = runday, hour = runhour, min = runminute, sec = runseconds})\n  data.startsAt = os.date(\"%d-%m-%Y %H:%M\", convertedTimestamp)\n  \n  data.averagePrice = 0 \n  local hAmount = 0\n  for hour in pairs(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today or {}) do -- Get the average price today\n    if jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].total ~= 0 and hour >= tonumber(runhour) and hAmount < 11 then\n      data.averagePrice = data.averagePrice + jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].total\n      hAmount = hAmount+1\n      self:logging(3, \"hour: \" ..hour ..\" price: \" ..jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].total ..\" data.averagePrice: \" ..data.averagePrice ..\" hAmount: \" ..hAmount)\n    end\n  end\n  for hour in pairs(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow or {}) do -- Get the average price tomorrow\n    if jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].total ~= 0 and hAmount < 11 then\n      data.averagePrice = data.averagePrice + jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].total\n      hAmount = hAmount+1\n      self:logging(3, \"hour: \" ..hour ..\" price: \" ..jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].total ..\" data.averagePrice: \" ..data.averagePrice ..\" hAmount: \" ..hAmount)\n    end\n  end\n  data.averagePrice = tonumber(data.averagePrice) / hAmount -- Calculate the average price \n  self:logging(3,\"data.averagePrice: \" ..data.averagePrice ..\" for: \" ..hAmount ..\" prices\")\n\n  for hour in pairs(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today or {}) do -- Insert all tadays prices to table jsonPrices\n    if hour-1 >= tonumber(runhour) and hour-1 < (tonumber(runhour)+tonumber(forNextHour)) then\n      if setPercentage == \"current\" then\n        table.insert(jsonPrices,{hour = tostring(hour-1)..\":00\", total = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].total, percentage = string.format(\"%.2f\",((jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].total-data.tPrice)/data.tPrice)*100), level = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].level:gsub(\"_\", \" \"), startsAt = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].startsAt})\n      else\n        table.insert(jsonPrices,{hour = tostring(hour-1)..\":00\", total = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].total, percentage = string.format(\"%.2f\",((jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].total-data.averagePrice)/data.averagePrice)*100), level = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].level:gsub(\"_\", \" \"), startsAt = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[hour].startsAt})\n      end\n    end\n  end\n\n  for hour in pairs(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow or {}) do -- Insert all tomorrow prices to table jsonPrices\n    if 24-tonumber(runhour)+hour <= tonumber(forNextHour) then\n      if setPercentage == \"average\" then\n        table.insert(jsonPrices,{hour = tostring(hour-1)..\":00\", total = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].total, percentage = string.format(\"%.2f\",((jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].total-data.averagePrice)/data.averagePrice)*100), level = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].level:gsub(\"_\", \" \"), startsAt = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].startsAt})\n      else\n        table.insert(jsonPrices,{hour = tostring(hour-1)..\":00\", total = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].total, percentage = string.format(\"%.2f\",((jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].total-data.tPrice)/data.tPrice)*100), level = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].level:gsub(\"_\", \" \"), startsAt = jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.tomorrow[hour].startsAt})\n      end\n    end\n  end\n  self:logging(3,\"Today and Tomorrow Prices: \" ..json.encode(jsonPrices))\n  \n  for i=1,11 do -- Get the minimum and maximum price, percentage, level and hour\n    self:logging(3, \"Globalvar \" ..i ..\": \" ..jsonPrices[i].level)\n    self:setGlobalVariable(\"tibber_h\" ..i-1 ..\"Level_\"..plugin.mainDeviceId, jsonPrices[i].level) -- Set global variables for Level\n  end\n  data.minPrice = 999 -- Return to initial value to force new lowest price\n  data.maxPrice = 0 -- Return to initial value to force new highest price\n  for n in pairs(jsonPrices or {}) do\n    if tonumber(jsonPrices[n].total) <= data.minPrice then\n      data.minPrice =      tonumber(jsonPrices[n].total)\n      data.minPercentage = jsonPrices[n].percentage\n      data.minLevel =      jsonPrices[n].level\n      data.minStartsAt =   jsonPrices[n].hour\n    end\n    if tonumber(jsonPrices[n].total) >= data.maxPrice then\n      data.maxPrice =      tonumber(jsonPrices[n].total)\n      data.maxPercentage = jsonPrices[n].percentage\n      data.maxLevel =      jsonPrices[n].level \n      data.maxStartsAt =   jsonPrices[n].hour\n    end  \n  end\n  \n  if os.date(\"%H\") == \"00\" then -- Workaround for previous hour price for Energy Panel\n    self:setVariable(\"workaroundPnn\",tonumber(self:getVariable(\"workaroundP23\"))) -- Save the 23h price\n  else\n    self:setVariable(\"workaroundP23\",tonumber(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[24].total)) -- Save the 23h price\n    self:setVariable(\"workaroundPnn\",tonumber(jsonTable.data.viewer.homes[homeNr].currentSubscription.priceInfo.today[tonumber(os.date(\"%H\"))].total)) -- Save the hour-1 price\n  end\n  \n  self:logging(3,\"data: \" ..json.encode(data))\nend\n\n\nfunction QuickApp:simData() -- Simulate Tibber Platform\n  self:logging(3,\"simData\")\n  data = os.date(\"*t\")\n  apiResult = '{\"data\":{\"viewer\":{\"homes\":[{\"hourly\":{\"nodes\":[]},\"daily\":{\"nodes\":[{\"from\":\"2022-01-01T00:00:00.000+01:00\",\"to\":\"2022-01-02T00:00:00.000+01:00\",\"cost\":27.1006221125,\"unitPrice\":1.567053,\"unitPriceVAT\":0.313411,\"consumption\":17.294,\"consumptionUnit\":\"kWh\"},{\"from\":\"2022-01-02T00:00:00.000+01:00\",\"to\":\"2022-01-03T00:00:00.000+01:00\",\"cost\":28.496682,\"unitPrice\":1.39505,\"unitPriceVAT\":0.27901,\"consumption\":20.427,\"consumptionUnit\":\"kWh\"},{\"from\":\"2022-01-03T00:00:00.000+01:00\",\"to\":\"2022-01-04T00:00:00.000+01:00\",\"cost\":34.053851625,\"unitPrice\":1.580959,\"unitPriceVAT\":0.316192,\"consumption\":21.54,\"consumptionUnit\":\"kWh\"}]},\"monthly\":{\"nodes\":[]},\"yearly\":{\"nodes\":[{\"from\":\"2020-01-01T00:00:00.000+01:00\",\"to\":\"2021-01-01T00:00:00.000+01:00\",\"cost\":44.070164325,\"unitPrice\":0.242081,\"unitPriceVAT\":0.048416,\"consumption\":182.047,\"consumptionUnit\":\"kWh\"},{\"from\":\"2021-01-01T00:00:00.000+01:00\",\"to\":\"2022-01-01T00:00:00.000+01:00\",\"cost\":8386.1734052,\"unitPrice\":0.894956,\"unitPriceVAT\":0.178991,\"consumption\":9370.488,\"consumptionUnit\":\"kWh\"}]},\"currentSubscription\":{\"status\":\"running\",\"priceInfo\":{\"current\":{\"total\":1.6576,\"energy\":1.3181,\"tax\":0.3395,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T00:00:00.000+01:00\"},\"today\":[{\"total\":1.6576,\"energy\":1.3181,\"tax\":0.3395,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T00:00:00.000+01:00\"},{\"total\":1.6596,\"energy\":1.3197,\"tax\":0.3399,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T01:00:00.000+01:00\"},{\"total\":1.6182,\"energy\":1.2866,\"tax\":0.3316,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T02:00:00.000+01:00\"},{\"total\":1.4547,\"energy\":1.1558,\"tax\":0.2989,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T03:00:00.000+01:00\"},{\"total\":1.4283,\"energy\":1.1346,\"tax\":0.2937,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T04:00:00.000+01:00\"},{\"total\":1.6745,\"energy\":1.3316,\"tax\":0.3429,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T05:00:00.000+01:00\"},{\"total\":1.8044,\"energy\":1.4355,\"tax\":0.3689,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T06:00:00.000+01:00\"},{\"total\":1.9481,\"energy\":1.5505,\"tax\":0.3976,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T07:00:00.000+01:00\"},{\"total\":2.1101,\"energy\":1.6801,\"tax\":0.43,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T08:00:00.000+01:00\"},{\"total\":2.0947,\"energy\":1.6678,\"tax\":0.4269,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T09:00:00.000+01:00\"},{\"total\":2.1027,\"energy\":1.6742,\"tax\":0.4285,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T10:00:00.000+01:00\"},{\"total\":2.0693,\"energy\":1.6474,\"tax\":0.4219,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T11:00:00.000+01:00\"},{\"total\":2.0112,\"energy\":1.601,\"tax\":0.4102,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T12:00:00.000+01:00\"},{\"total\":1.9576,\"energy\":1.5581,\"tax\":0.3995,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T13:00:00.000+01:00\"},{\"total\":1.951,\"energy\":1.5528,\"tax\":0.3982,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T14:00:00.000+01:00\"},{\"total\":1.9921,\"energy\":1.5857,\"tax\":0.4064,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T15:00:00.000+01:00\"},{\"total\":2.0284,\"energy\":1.6147,\"tax\":0.4137,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T16:00:00.000+01:00\"},{\"total\":2.1086,\"energy\":1.6789,\"tax\":0.4297,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T17:00:00.000+01:00\"},{\"total\":2.0673,\"energy\":1.6458,\"tax\":0.4215,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T18:00:00.000+01:00\"},{\"total\":1.9349,\"energy\":1.54,\"tax\":0.3949,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T19:00:00.000+01:00\"},{\"total\":1.8465,\"energy\":1.4692,\"tax\":0.3773,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T20:00:00.000+01:00\"},{\"total\":1.781,\"energy\":1.4168,\"tax\":0.3642,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T21:00:00.000+01:00\"},{\"total\":1.7265,\"energy\":1.3732,\"tax\":0.3533,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T22:00:00.000+01:00\"},{\"total\":1.4392,\"energy\":1.1434,\"tax\":0.2958,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2022-01-04T23:00:00.000+01:00\"}],\"tomorrow\":[]}}},{\"hourly\":{\"nodes\":[]},\"daily\":{\"nodes\":[{\"from\":\"2022-01-01T00:00:00.000+01:00\",\"to\":\"2022-01-02T00:00:00.000+01:00\",\"cost\":218.896785625,\"unitPrice\":1.636979,\"unitPriceVAT\":0.327396,\"consumption\":133.72,\"consumptionUnit\":\"kWh\"},{\"from\":\"2022-01-02T00:00:00.000+01:00\",\"to\":\"2022-01-03T00:00:00.000+01:00\",\"cost\":188.634708375,\"unitPrice\":1.44448,\"unitPriceVAT\":0.288896,\"consumption\":130.59,\"consumptionUnit\":\"kWh\"},{\"from\":\"2022-01-03T00:00:00.000+01:00\",\"to\":\"2022-01-04T00:00:00.000+01:00\",\"cost\":125.61865085,\"unitPrice\":1.637472,\"unitPriceVAT\":0.327494,\"consumption\":76.715,\"consumptionUnit\":\"kWh\"}]},\"monthly\":{\"nodes\":[]},\"yearly\":{\"nodes\":[{\"from\":\"2020-01-01T00:00:00.000+01:00\",\"to\":\"2021-01-01T00:00:00.000+01:00\",\"cost\":240.545030375,\"unitPrice\":0.271799,\"unitPriceVAT\":0.05436,\"consumption\":885.01,\"consumptionUnit\":\"kWh\"},{\"from\":\"2021-01-01T00:00:00.000+01:00\",\"to\":\"2022-01-01T00:00:00.000+01:00\",\"cost\":34951.238516,\"unitPrice\":0.979518,\"unitPriceVAT\":0.195904,\"consumption\":35682.08,\"consumptionUnit\":\"kWh\"}]},\"currentSubscription\":{\"status\":\"running\",\"priceInfo\":{\"current\":{\"total\":1.6576,\"energy\":1.3181,\"tax\":0.3395,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T00:00:00.000+01:00\"},\"today\":[{\"total\":1.6576,\"energy\":1.3181,\"tax\":0.3395,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T00:00:00.000+01:00\"},{\"total\":1.6596,\"energy\":1.3197,\"tax\":0.3399,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T01:00:00.000+01:00\"},{\"total\":1.6182,\"energy\":1.2866,\"tax\":0.3316,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T02:00:00.000+01:00\"},{\"total\":1.4547,\"energy\":1.1558,\"tax\":0.2989,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T03:00:00.000+01:00\"},{\"total\":1.4283,\"energy\":1.1346,\"tax\":0.2937,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T04:00:00.000+01:00\"},{\"total\":1.6745,\"energy\":1.3316,\"tax\":0.3429,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T05:00:00.000+01:00\"},{\"total\":1.8044,\"energy\":1.4355,\"tax\":0.3689,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T06:00:00.000+01:00\"},{\"total\":1.9481,\"energy\":1.5505,\"tax\":0.3976,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T07:00:00.000+01:00\"},{\"total\":2.1101,\"energy\":1.6801,\"tax\":0.43,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T08:00:00.000+01:00\"},{\"total\":2.0947,\"energy\":1.6678,\"tax\":0.4269,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T09:00:00.000+01:00\"},{\"total\":2.1027,\"energy\":1.6742,\"tax\":0.4285,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T10:00:00.000+01:00\"},{\"total\":2.0693,\"energy\":1.6474,\"tax\":0.4219,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T11:00:00.000+01:00\"},{\"total\":2.0112,\"energy\":1.601,\"tax\":0.4102,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T12:00:00.000+01:00\"},{\"total\":1.9576,\"energy\":1.5581,\"tax\":0.3995,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T13:00:00.000+01:00\"},{\"total\":1.951,\"energy\":1.5528,\"tax\":0.3982,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T14:00:00.000+01:00\"},{\"total\":1.9921,\"energy\":1.5857,\"tax\":0.4064,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T15:00:00.000+01:00\"},{\"total\":2.0284,\"energy\":1.6147,\"tax\":0.4137,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T16:00:00.000+01:00\"},{\"total\":2.1086,\"energy\":1.6789,\"tax\":0.4297,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T17:00:00.000+01:00\"},{\"total\":2.0673,\"energy\":1.6458,\"tax\":0.4215,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T18:00:00.000+01:00\"},{\"total\":1.9349,\"energy\":1.54,\"tax\":0.3949,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2022-01-04T19:00:00.000+01:00\"},{\"total\":1.8465,\"energy\":1.4692,\"tax\":0.3773,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T20:00:00.000+01:00\"},{\"total\":1.781,\"energy\":1.4168,\"tax\":0.3642,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T21:00:00.000+01:00\"},{\"total\":1.7265,\"energy\":1.3732,\"tax\":0.3533,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2022-01-04T22:00:00.000+01:00\"},{\"total\":1.4392,\"energy\":1.1434,\"tax\":0.2958,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2022-01-04T23:00:00.000+01:00\"}],\"tomorrow\":[]}}}]}}}'\n \n  jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table \n  \n  self:getValues()\n  self:updateLabels()\n  self:updateProperties()\n  self:updateEnergyPanel(tonumber(self:getVariable(\"workaroundPnn\")))\n  self:updateChildDevices() \n\n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:getData()\n  self:logging(3,\"getData\")\n  data = os.date(\"*t\")\n  local url = \"https://api.tibber.com/v1-beta/gql\"\n  local requestBody = '{\"query\": \"{viewer {homes {hourly: consumption(resolution: HOURLY, last: ' ..data.hour ..') {nodes {from to cost unitPrice unitPriceVAT consumption consumptionUnit}}daily: consumption(resolution: DAILY, last: ' ..data.day-1 ..') {nodes {from to cost unitPrice unitPriceVAT consumption consumptionUnit}}monthly: consumption(resolution: MONTHLY, last: ' ..data.month-1 ..') {nodes {from to cost unitPrice unitPriceVAT consumption consumptionUnit}}yearly: consumption(resolution: ANNUAL, last: ' ..data.year-2000 ..') {nodes {from to cost unitPrice unitPriceVAT consumption consumptionUnit}}currentSubscription {status priceInfo {current {total energy tax currency level startsAt}today {total energy tax currency level startsAt}tomorrow {total energy tax currency level startsAt}}}}}}\"}'\n  \n  self:logging(3,\"requestBody: \" ..requestBody)\n\n  http:request(url, {\n    options = {\n      data = requestBody,\n      method = \"POST\",\n      headers = {\n        [\"Content-Type\"] = \"application/json\",\n        [\"Accept\"] = \"application/json\",\n        [\"Authorization\"] = \"Bearer \" ..token,\n      }\n    },\n    success = function(response) \n        self:logging(3,\"response status: \" ..response.status)\n        self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n        self:logging(3,\"Response data: \" ..response.data)\n\n        if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 or (os.date(\"%H:%M\") <= \"00:05\") then -- Check for empty result or skip for midnight empty results\n          if os.date(\"%H:%M\") < \"00:05\" then\n            self:warning(\"No production data from Tibber Monitor between 00:00 and 00:05\")\n          else\n            self:warning(\"Temporarily no production data from Tibber Monitor\")\n          end\n          return\n        end\n\n        response.data = response.data:gsub(\"null\", \"0\") -- clean up the response.data by replacing null with 0\n        --self:logging(3,\"Response data without null: \" ..response.data)\n\n        jsonTable = json.decode(response.data) -- JSON decode from api to lua-table\n\n        self:getValues()\n        self:updateLabels()\n        self:updateProperties()\n        self:updateEnergyPanel(tonumber(self:getVariable(\"workaroundPnn\")))\n        self:updateChildDevices() \n\n      end,\n      error = function(error)\n        self:error(\"error: \" ..json.encode(error))\n        self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n      end\n    }) \n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:getData()\n  end)\n\nend\n\n\nfunction QuickApp:createVariables() -- Create all Variables \n  jsonTable = {}\n  jsonPrices = {}\n  data = {}\n  data.hEnergy = 0 -- Hourly data\n  data.hCost = 0\n  data.dEnergy = 0 -- Daily data\n  data.dCost = 0\n  data.mEnergy = 0 -- Monthly data\n  data.mCost = 0\n  data.yEnergy = 0 -- Yearly data\n  data.yCost = 0\n  data.tEnergy = 0 -- Total data\n  data.tCost = 0\n  data.minPrice = 0 -- Minimum Price\n  data.minPercentage = 0\n  data.minLevel = \"\"\n  data.minStartsAt = \"\"\n  data.maxPrice = 0 -- Maximum Price\n  data.maxPercentage = 0\n  data.maxLevel = \"\"\n  data.maxStartsAt = \"\"\n  data.averagePrice = 0 -- Average Price\n  data.tPrice = 0 -- Total Price\n  data.gPrice = 0 -- (Gross) Energy Price\n  data.tax = 0 -- Tax Price\n  data.currency = \"\" \n  data.level = \"\"\n  data.startsAt = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all Quickapp Variables or create them\n  token =         self:getVariable(\"token\")\n  homeNr =        tonumber(self:getVariable(\"homeNr\"))\n  extraCost =     tonumber(self:getVariable(\"extraCost\")) \n  interval =      tonumber(self:getVariable(\"interval\")) \n  httpTimeout =   tonumber(self:getVariable(\"httpTimeout\")) \n  debugLevel =    tonumber(self:getVariable(\"debugLevel\"))\n  setGlobalVar =  string.lower(self:getVariable(\"setGlobalVar\"))\n  setPercentage = string.lower(self:getVariable(\"setPercentage\"))\n  setEnergyPanel = string.lower(self:getVariable(\"setEnergyPanel\"))\n  forNextHour =   tonumber(self:getVariable(\"forNextHour\"))\n  local workaroundE01 = tonumber(self:getVariable(\"workaroundE01\")) \n  local workaroundC01 = tonumber(self:getVariable(\"workaroundC01\")) \n  local workaroundPnn = tonumber(self:getVariable(\"workaroundPnn\")) \n  local workaroundP23 = tonumber(self:getVariable(\"workaroundP23\")) \n\n  -- Check existence of the mandatory variables, if not, create them with default values\n  if token == \"\" or token == nil then\n    token = \"476c477d8a039529478ebd690d35ddd80e3308ffc49b59c65b142321aee963a4\" -- This token is just an demo example, only for demo purposes\n    self:setVariable(\"token\",token)\n    self:trace(\"Added QuickApp variable with DEMO (!) token\")\n  end\n  if homeNr == \"\" or homeNr == nil then\n    homeNr = \"1\"\n    self:setVariable(\"homeNr\",homeNr)\n    self:trace(\"Added QuickApp variable homeNr\")\n    homeNr = tonumber(homeNr)\n  end\n  if extraCost == \"\" or extraCost == nil then\n    extraCost = \"0\"\n    self:setVariable(\"extraCost\",extraCost)\n    self:trace(\"Added QuickApp variable extraCost\")\n    extraCost = tonumber(extraCost)\n  end\n  if interval == \"\" or interval == nil then\n    interval = \"930\" \n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end\n  if httpTimeout == \"\" or httpTimeout == nil then\n    httpTimeout = \"5\" -- Default http timeout \n    self:setVariable(\"httpTimeout\",httpTimeout)\n    self:trace(\"Added QuickApp variable httpTimeout\")\n    httpTimeout = tonumber(httpTimeout)\n  end \n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default debug level\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if setGlobalVar == \"\" or setGlobalVar == nil then \n    setGlobalVar = false -- Default SetGlobalVar is false (No use of Global Variables)\n    self:setVariable(\"setGlobalVar\",tostring(setGlobalVar))\n    self:trace(\"Added QuickApp variable setGlobalVar\")\n  end\n  if setGlobalVar == \"true\" then \n    setGlobalVar = true \n  else\n    setGlobalVar = false\n  end\n  if setPercentage == \"\" or setPercentage == nil then \n    setPercentage = \"average\" -- Default value\n    self:setVariable(\"setPercentage\",tostring(setPercentage))\n    self:trace(\"Added QuickApp variable setPercentage\")\n  elseif setPercentage ~= \"current\" and setPercentage ~= \"average\" then \n    setPercentage = \"average\" \n  end\n  if setEnergyPanel == \"\" or setEnergyPanel == nil then \n    setEnergyPanel = false -- Default setEnergyPanel is false (No inserting prices in Energy Panel)\n    self:setVariable(\"setEnergyPanel\",tostring(setEnergyPanel))\n    self:trace(\"Added QuickApp variable setEnergyPanel\")\n  end\n  if setEnergyPanel == \"true\" then \n    setEnergyPanel = true \n  else\n    setEnergyPanel = false\n  end\n  if token == nil or token == \"\"  or token == \"0\" then -- Check mandatory token \n    self:error(\"Token is empty! Get your token from the Tibber website and copy the token to the quickapp variable\")\n    self:warning(\"No token, switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty token\n  end\n  if forNextHour == \"\" or forNextHour == nil or forNextHour < 12 or forNextHour > 35 then\n    forNextHour = \"12\" -- Default value\n    self:setVariable(\"forNextHour\",forNextHour)\n    self:trace(\"Added QuickApp variable forNextHour\")\n    forNextHour = tonumber(forNextHour)\n  end\n  if workaroundE01 == \"\" or workaroundE01 == nil then\n    workaroundE01 = \"0\" \n    self:setVariable(\"workaroundE01\",workaroundE01)\n    self:trace(\"Added QuickApp variable workaroundE01 for Energy 00-01 hour\")\n  end\n  if workaroundC01 == \"\" or workaroundC01 == nil then\n    workaroundC01 = \"0\" \n    self:setVariable(\"workaroundC01\",workaroundC01)\n    self:trace(\"Added QuickApp variable workaroundC01 for Cost 00-01 hour\")\n  end\n  if workaroundPnn == \"\" or workaroundPnn == nil then\n    workaroundPnn = \"0\" \n    self:setVariable(\"workaroundPnn\",workaroundPnn)\n    self:trace(\"Added QuickApp variable workaroundPnn for Price Energy Panel\")\n  end\n  if workaroundP23 == \"\" or workaroundP23 == nil then\n    workaroundP23 = \"0\" \n    self:setVariable(\"workaroundP23\",workaroundP23)\n    self:trace(\"Added QuickApp variable workaroundP23 for 23h Price Energy Panel\")\n  end\nend\n  \n\nfunction QuickApp:setupChildDevices() -- Setup Child Devices\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n    local initChildData = { \n      {className=\"hEnergy\", name=\"Hourly Energy\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"hCost\", name=\"Hourly Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"dEnergy\", name=\"Daily Energy\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"dCost\", name=\"Daily Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"mEnergy\", name=\"Monthly Energy\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"mCost\", name=\"Monthly Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"yEnergy\", name=\"Yearly Energy\", type=\"com.fibaro.multilevelSensor\"}, \n      {className=\"yCost\", name=\"Yearly Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"tEnergy\", name=\"Total Energy\", type=\"com.fibaro.energyMeter\"}, -- Device for values Energy Panel\n      {className=\"tCost\", name=\"Total Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"hPrice\", name=\"Current Price\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"minPrice\", name=\"Minimum Price\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"maxPrice\", name=\"Maximum Price\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"averagePrice\", name=\"Average Price\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h0Percentage\", name=\"+0 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h1Percentage\", name=\"+1 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h2Percentage\", name=\"+2 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h3Percentage\", name=\"+3 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h4Percentage\", name=\"+4 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h5Percentage\", name=\"+5 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h6Percentage\", name=\"+6 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h7Percentage\", name=\"+7 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h8Percentage\", name=\"+8 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h9Percentage\", name=\"+9 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h10Percentage\", name=\"+10 hour\", type=\"com.fibaro.multilevelSensor\"},\n    }\n    for _,c in ipairs(initChildData) do\n      local ips = UI and self:makeInitialUIProperties(UI or {}) or {}\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          properties = {viewLayout = ips.viewLayout, uiCallbacks = ips.uiCallbacks},\n          interfaces = {\"quickApp\"}, \n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className) -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\") \n\n  self:setupChildDevices() -- Setup the Child Devices\n\n  if not api.get(\"/devices/\"..self.id).enabled then\n    self:warning(\"Device\", fibaro.getName(plugin.mainDeviceId), \"is disabled\")\n    return\n  end\n  \n  self:getQuickAppVariables() \n  self:createVariables()\n  \n  http = net.HTTPClient({timeout=httpTimeout*1000})\n  \n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getData() -- Get data from the Tibber platform\n  end\nend\n\n-- EOF "}]}