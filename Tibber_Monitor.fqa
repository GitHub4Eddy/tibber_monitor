{"name":"Tibber Monitor","type":"com.fibaro.energyMeter","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_619"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_619"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"token","type":"string","value":"476c477d8a039529478ebd690d35ddd80e3308ffc49b59c65b142321aee963a4"},{"name":"interval","type":"string","value":"3600"},{"name":"httpTimeout","type":"string","value":"5"},{"name":"debugLevel","type":"string","value":"3"},{"name":"extraCost","type":"string","value":"0.3649"},{"name":"setGlobalVar","type":"string","value":"false"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP Tibber Monitor\n\n-- This QuickApp gets todays an tomorrows energy prices from the Tibber platform. \n-- Next to the current prices the lowest and highest price for the next 12 hours is calculated.\n-- Tax and fees are included in the hourly, daily and yearly cost.  \n-- All values are displayed in the labels. \n-- Child devices are available for:\n   -- Hourly energy usage\n   -- Hourly energy cost\n   -- Todays energy usage (com.fibaro.energyMeter with automatic rateType=consumption for Fibaro Energy Panel)\n   -- Todays energy cost (including fees)\n   -- Yearly energy usage\n   -- Yearly energy cost\n   -- Actual price now\n   -- Minumum price today (for the next 12 hours)\n   -- Maximum price today (for the next 12 hours)\n   -- Percentage +1 hour (compaired to actual price now, positive value means a increase of the price, negative value means a decrease of the price)\n   -- Percentage +2 hour\n   -- Percentage +3 hour\n   -- Percentage +4 hour\n   -- Percentage +5 hour\n-- These values can be used to control appliances according to the lowest and forecast prices during the day. \n\n-- To communicate with the API you need to acquire a OAuth access token and pass this along with every request passed to the server.\n-- A Personal Access Token give you access to your data and your data only. \n-- This is ideal for DIY people that want to leverage the Tibber platform to extend the smartness of their home. \n-- Such a token can be acquired here: https://thewall.tibber.com\n\n-- When creating your access token or OAuth client you’ll be asked which scopes you want the access token to be associated with. \n-- These scopes tells the API which data and operations the client is allowed to perfom on the user’s behalf. \n-- The scopes your app requires depend on the type of data it is trying to request. \n-- If you for example need access to user information you add the USER scope. \n-- If information about the users homes is needed you add the appropiate HOME scopes.\n\n-- Tomorrow values are available from 13:00 hour\n\n-- Tibber API documentation: https://developer.tibber.com/docs/guides/calling-api\n-- Tibber API explorer: https://developer.tibber.com/explorer\n\n\n-- ToDo:\n-- Main device Current energy usage Watt (real time subscription = WebSocket?) (main device = powerSensor)\n-- Create global variables for ?\n-- Total energy usage not available? \n\n\n-- Changes version 0.2 (29th December 2021)\n-- Added all child devices\n-- Added QuickApp variable for extra cost and added the cost to the calculations\n-- Replaced \"null\" values in response to prevent errors\n-- Limited values to next 12 hours\n\n\n-- Changes version 0.1 (23rd December 2021)\n-- Initial version\n\n\n-- Variables (mandatory and created automatically): \n-- token = Authorization token (see the Tibber website: https://thewall.tibber.com)\n-- extraCost = Extra cost per kWh for Tibber and Cable owner, decimals with dot, not komma (default = 0)\n-- interval = Interval in seconds to get the data from the Tibber Platform. The default request interval is 3600 seconds (60 minutes).\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n-- setGlobalVar = true or false, whether you want tu use the Global Variables (default = false)\n\n\n-- No editing of this code is needed \n\n\n-- Child Devices\n\nclass 'hEnergy'(QuickAppChild)\nfunction hEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction hEnergy:updateValue(data) \n  self:updateProperty(\"value\", data.hEnergy)\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'hCost'(QuickAppChild)\nfunction hCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction hCost:updateValue(data) \n  self:updateProperty(\"value\", data.hCost)\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'dEnergy'(QuickAppChild)\nfunction dEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n    self:updateProperty(\"rateType\", \"consumption\")\n    self:warning(\"Changed rateType interface of Todays Consumption child device (\" ..self.id ..\") to consumption\")\n  end\nend\nfunction dEnergy:updateValue(data) \n  self:updateProperty(\"value\", data.dEnergy)\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'dCost'(QuickAppChild)\nfunction dCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction dCost:updateValue(data) \n  self:updateProperty(\"value\", data.dCost)\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'yEnergy'(QuickAppChild)\nfunction yEnergy:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction yEnergy:updateValue(data) \n  self:updateProperty(\"value\", data.yEnergy)\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'yCost'(QuickAppChild)\nfunction yCost:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction yCost:updateValue(data) \n  self:updateProperty(\"value\", data.yCost)\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'hPrice'(QuickAppChild)\nfunction hPrice:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction hPrice:updateValue(data) \n  self:updateProperty(\"value\", data.tPrice)\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", data.level)\nend\n\nclass 'minPrice'(QuickAppChild)\nfunction minPrice:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction minPrice:updateValue(data) \n  self:updateProperty(\"value\", data.minPrice)\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", data.minStartsAt ..\" \" ..data.minLevel)\nend\n\nclass 'maxPrice'(QuickAppChild)\nfunction maxPrice:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction maxPrice:updateValue(data) \n  self:updateProperty(\"value\", data.maxPrice)\n  self:updateProperty(\"unit\", data.currency)\n  self:updateProperty(\"log\", data.maxStartsAt ..\" \"..data.maxLevel)\nend\n\nclass 'h1Percentage'(QuickAppChild)\nfunction h1Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h1Percentage:updateValue(data) \n  self:updateProperty(\"value\", data.h1Percentage)\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'h2Percentage'(QuickAppChild)\nfunction h2Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h2Percentage:updateValue(data) \n  self:updateProperty(\"value\", data.h2Percentage)\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'h3Percentage'(QuickAppChild)\nfunction h3Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h3Percentage:updateValue(data) \n  self:updateProperty(\"value\", data.h3Percentage)\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'h4Percentage'(QuickAppChild)\nfunction h4Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h4Percentage:updateValue(data) \n  self:updateProperty(\"value\", data.h4Percentage)\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", \" \")\nend\n\nclass 'h5Percentage'(QuickAppChild)\nfunction h5Percentage:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction h5Percentage:updateValue(data) \n  self:updateProperty(\"value\", data.h5Percentage)\n  self:updateProperty(\"unit\", \"%\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp functions\n\n\nfunction QuickApp:updateChildDevices() -- Update Child Devices\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data) \n  end\nend\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:setGlobalVariable(tag,res) -- Fill the Global Variables\n  if setGlobalVar then -- self:setGlobalVariable(\"[nameOfGlobal]_\"..plugin.mainDeviceId,[value])\n    if api.get(\"/globalVariables/\"..tag) == nil then\n      local responseData, status = api.post(\"/globalVariables/\",{value=(json.encode(res)),name=tag})\n      self:trace(\"Global Variable created: \" ..tag ..\" / status: \" ..status) \n    else\n      local responseData, status = api.put(\"/globalVariables/\"..tag,{value=(json.encode(res))})\n    end\n  else\n    if api.get(\"/globalVariables/\"..tag) then\n      self:deleteGlobalVariable(tag) -- If the Global Variable exists, delete it\n    end\n  end\nend\n\n\nfunction QuickApp:deleteGlobalVariable(tag) -- Delete the Global Variables\n   local responseData, status = api.delete(\"/globalVariables/\"..tag) \n   self:trace(\"Global Variable deleted: \" ..tag ..\" / status: \" ..status)\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:logging(3,\"updateProperties\")\n  self:updateProperty(\"value\", 0) -- For future use\n  self:updateProperty(\"unit\", \"\")\n  self:updateProperty(\"log\", data.startsAt)\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  self:logging(3,\"updateLabels\")\n  \n  local labelText = \"\"\n  if debugLevel == 4 then\n    labelText = labelText ..\"SIMULATION MODE\" ..\"\\n\\n\"\n  end\n  labelText = labelText ..\"Hourly Energy: \" ..data.hEnergy ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.hCost+data.hTax+(extraCost*data.hEnergy)) ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Daily Energy: \" ..data.dEnergy ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.dCost+data.dTax+(extraCost*data.dEnergy)) ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Yearly Energy: \" ..data.yEnergy ..\" kWh / Cost: \" ..string.format(\"%.2f\",data.yCost+data.yTax+(extraCost*data.yEnergy))  ..\" \" ..data.currency ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Actual Price: \" ..data.tPrice ..\" \" ..data.currency ..\" per kWh (\" ..data.level ..\")\" ..\"\\n\"\n  labelText = labelText ..\"Energy: \" ..data.gPrice ..\" \" ..data.currency ..\" / Tax: \" ..data.tax ..\" Cost: \" ..extraCost ..\" \" ..data.currency ..\"\\n\"\n  labelText = labelText ..\"Starts at: \" ..data.startsAt ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Next 12 hours:\" ..\"\\n\"\n  labelText = labelText ..\"Lowest: \" ..data.minPrice ..\" \" ..data.currency ..\" at: \" ..data.minStartsAt ..\" \" ..data.minLevel ..\"\\n\"\n  labelText = labelText ..\"Highest: \" ..data.maxPrice ..\" \" ..data.currency ..\" at: \" ..data.maxStartsAt ..\" \" ..data.maxLevel ..\"\\n\\n\"\n\n  for n in pairs(jsonPrices) do\n    labelText = labelText ..\"Price: \" ..jsonPrices[n].total ..\" \" ..data.currency ..\" at: \" ..jsonPrices[n].hour ..\" \" ..jsonPrices[n].level ..\"\\n\"\n  end\n  \n  self:updateView(\"label1\", \"text\", labelText)\n  self:logging(2,\"Label1: \" ..labelText)\nend\n\n\nfunction QuickApp:getValues() -- Get the values from json file \n  self:logging(3,\"getValues\")\n  if jsonTable.data.viewer.homes[1].hourly.nodes[1].consumption ~= nil then \n    data.hEnergy = tonumber(string.format(\"%.4f\",jsonTable.data.viewer.homes[1].hourly.nodes[1].consumption))\n  else\n    data.hEnergy = 0\n  end\n  if jsonTable.data.viewer.homes[1].hourly.nodes[1].cost ~= nil then\n    data.hCost = tonumber(string.format(\"%.2f\",jsonTable.data.viewer.homes[1].hourly.nodes[1].cost))\n  else\n    data.hCost = 0\n  end\n  data.hTax = tonumber(string.format(\"%.2f\",tonumber(jsonTable.data.viewer.homes[1].hourly.nodes[1].unitPriceVAT)*data.hEnergy))\n  data.dEnergy = tonumber(string.format(\"%.4f\",jsonTable.data.viewer.homes[1].daily.nodes[1].consumption))\n  data.dCost = tonumber(string.format(\"%.2f\",jsonTable.data.viewer.homes[1].daily.nodes[1].cost or 0))\n  data.dTax = tonumber(string.format(\"%.2f\",tonumber(jsonTable.data.viewer.homes[1].daily.nodes[1].unitPriceVAT)*data.dEnergy ))\n  data.yEnergy = tonumber(string.format(\"%.4f\",jsonTable.data.viewer.homes[1].yearly.nodes[1].consumption))\n  data.yCost = tonumber(string.format(\"%.2f\",jsonTable.data.viewer.homes[1].yearly.nodes[1].cost))\n  data.yTax = tonumber(string.format(\"%.2f\",tonumber(jsonTable.data.viewer.homes[1].yearly.nodes[1].unitPriceVAT)*data.yEnergy ))\n  data.hPrice = 0\n  \n  data.tPrice = tonumber(string.format(\"%.4f\",jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.current.total))\n  data.gPrice = tonumber(string.format(\"%.4f\",jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.current.energy))\n  data.tax = tonumber(string.format(\"%.4f\",jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.current.tax))\n  data.currency = jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.current.currency\n  data.level = jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.current.level:gsub(\"_\", \" \") \n  data.startsAt = jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.current.startsAt\n  \n  local pattern = \"(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+).(%d+)+(%d+):(%d+)\" --2021-12-23T17:00:00.000+01:00\n  local runyear, runmonth, runday, runhour, runminute, runseconds = data.startsAt:match(pattern)\n  local convertedTimestamp = os.time({year = runyear, month = runmonth, day = runday, hour = runhour, min = runminute, sec = runseconds})\n  data.startsAt = os.date(\"%d-%m-%Y %H:%M\", convertedTimestamp)\n  \n  for hour in pairs(jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.today) do -- Insert all tadays prices to table jsonPrices\n    if hour-1 >= tonumber(runhour) then\n      table.insert(jsonPrices,{hour = tostring(hour-1)..\":00\", total = string.format(\"%.4f\",jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.today[hour].total), level = \"(\" ..jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.today[hour].level:gsub(\"_\", \" \")  ..\")\", startsAt = jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.today[hour].startsAt})\n    end\n  end\n  for hour in pairs(jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.tomorrow) do -- Insert all tomorrow prices to table jsonPrices\n    if 24-tonumber(runhour)+hour <= 12 then \n      table.insert(jsonPrices,{hour = tostring(hour-1)..\":00\", total = string.format(\"%.4f\",jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.tomorrow[hour].total), level = \"(\" ..jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.tomorrow[hour].level:gsub(\"_\", \" \")  ..\")\", startsAt = jsonTable.data.viewer.homes[1].currentSubscription.priceInfo.tomorrow[hour].startsAt})\n    end\n  end\n  self:logging(3,\"Today and Tomorrow Prices: \" ..json.encode(jsonPrices))\n  \n  local total = 0\n  data.minPrice = 999 -- Return to initial value to force new lowest price\n  data.maxPrice = 0 -- Return to initial value to force new highest price\n  for n in pairs(jsonPrices) do\n    total = tonumber(string.format(\"%.4f\",jsonPrices[n].total))\n    if total <= data.minPrice then\n      data.minPrice = tonumber(total)\n      data.minLevel = jsonPrices[n].level\n      data.minStartsAt = jsonPrices[n].hour\n    end\n    if total >= data.maxPrice then\n      data.maxPrice = tonumber(total)\n      data.maxLevel = jsonPrices[n].level \n      data.maxStartsAt = jsonPrices[n].hour\n    end  \n    if n == 2 then\n      self:logging(3,\"hour+1: \" ..tostring(n-1) ..\" / runhour: \" ..tostring(runhour+1) ..\" / tprice: \" ..data.tPrice ..\" / total: \" ..total)\n      data.h1Percentage = (total-data.tPrice)/data.tPrice*100\n    elseif n == 3 then\n      self:logging(3,\"hour+2: \" ..tostring(n-1) ..\" / runhour: \" ..tostring(runhour+2) ..\" / tprice: \" ..data.tPrice ..\" / total: \" ..total)\n      data.h2Percentage = (total-data.tPrice)/data.tPrice*100\n    elseif n == 4 then\n      self:logging(3,\"hour+3: \" ..tostring(n-1) ..\" / runhour: \" ..tostring(runhour+3) ..\" / tprice: \" ..data.tPrice ..\" / total: \" ..total)\n      data.h3Percentage = (total-data.tPrice)/data.tPrice*100\n    elseif n == 5 then\n      self:logging(3,\"hour+4: \" ..tostring(n-1) ..\" / runhour: \" ..tostring(runhour+4) ..\" / tprice: \" ..data.tPrice ..\" / total: \" ..total)\n      data.h4Percentage = (total-data.tPrice)/data.tPrice*100\n    elseif n == 6 then\n      self:logging(3,\"hour+5: \" ..tostring(n-1) ..\" / runhour: \" ..tostring(runhour+5) ..\" / tprice: \" ..data.tPrice ..\" / total: \" ..total)\n      data.h5Percentage = (total-data.tPrice)/data.tPrice*100\n    end\n  end\nend\n\n\nfunction QuickApp:simData() -- Simulate Tibber Platform\n  self:logging(3,\"simData\")\n  apiResult = '{\"data\":{\"viewer\":{\"homes\":[{\"hourly\":{\"nodes\":[{\"from\":\"2021-12-29T14:00:00.000+01:00\",\"to\":\"2021-12-29T15:00:00.000+01:00\",\"cost\":3.0354753,\"unitPrice\":0.8844625,\"unitPriceVAT\":0.1768925,\"consumption\":3.432,\"consumptionUnit\":\"kWh\"}]},\"daily\":{\"nodes\":[{\"from\":\"2021-12-28T00:00:00.000+01:00\",\"to\":\"2021-12-29T00:00:00.000+01:00\",\"cost\":68.6274829375,\"unitPrice\":0.783598,\"unitPriceVAT\":0.15672,\"consumption\":87.58,\"consumptionUnit\":\"kWh\"}]},\"yearly\":{\"nodes\":[{\"from\":\"2020-01-01T00:00:00.000+01:00\",\"to\":\"2021-01-01T00:00:00.000+01:00\",\"cost\":1465.24875625,\"unitPrice\":0.127965,\"unitPriceVAT\":0.025593,\"consumption\":11450.413,\"consumptionUnit\":\"kWh\"}]},\"currentSubscription\":{\"status\":\"running\",\"priceInfo\":{\"current\":{\"total\":1.1345,\"energy\":0.8996,\"tax\":0.2349,\"currency\":\"NOK\",\"level\":\"VERY_EXPENSIVE\",\"startsAt\":\"2021-12-29T15:00:00.000+01:00\"},\"today\":[{\"total\":0.7158,\"energy\":0.5647,\"tax\":0.1511,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T00:00:00.000+01:00\"},{\"total\":1.1471,\"energy\":0.9097,\"tax\":0.2374,\"currency\":\"NOK\",\"level\":\"VERY_EXPENSIVE\",\"startsAt\":\"2021-12-29T01:00:00.000+01:00\"},{\"total\":0.9309,\"energy\":0.7367,\"tax\":0.1942,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2021-12-29T02:00:00.000+01:00\"},{\"total\":0.7852,\"energy\":0.6201,\"tax\":0.1651,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T03:00:00.000+01:00\"},{\"total\":0.7131,\"energy\":0.5625,\"tax\":0.1506,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T04:00:00.000+01:00\"},{\"total\":0.7044,\"energy\":0.5555,\"tax\":0.1489,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T05:00:00.000+01:00\"},{\"total\":0.6754,\"energy\":0.5323,\"tax\":0.1431,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T06:00:00.000+01:00\"},{\"total\":0.7008,\"energy\":0.5527,\"tax\":0.1481,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T07:00:00.000+01:00\"},{\"total\":0.7141,\"energy\":0.5633,\"tax\":0.1508,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T08:00:00.000+01:00\"},{\"total\":0.7589,\"energy\":0.5991,\"tax\":0.1598,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T09:00:00.000+01:00\"},{\"total\":0.784,\"energy\":0.6192,\"tax\":0.1648,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T10:00:00.000+01:00\"},{\"total\":0.7894,\"energy\":0.6235,\"tax\":0.1659,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T11:00:00.000+01:00\"},{\"total\":0.7878,\"energy\":0.6222,\"tax\":0.1656,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T12:00:00.000+01:00\"},{\"total\":0.831,\"energy\":0.6568,\"tax\":0.1742,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T13:00:00.000+01:00\"},{\"total\":0.8845,\"energy\":0.6996,\"tax\":0.1849,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2021-12-29T14:00:00.000+01:00\"},{\"total\":1.1345,\"energy\":0.8996,\"tax\":0.2349,\"currency\":\"NOK\",\"level\":\"VERY_EXPENSIVE\",\"startsAt\":\"2021-12-29T15:00:00.000+01:00\"},{\"total\":1.4039,\"energy\":1.1152,\"tax\":0.2887,\"currency\":\"NOK\",\"level\":\"VERY_EXPENSIVE\",\"startsAt\":\"2021-12-29T16:00:00.000+01:00\"},{\"total\":1.0097,\"energy\":0.7998,\"tax\":0.2099,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2021-12-29T17:00:00.000+01:00\"},{\"total\":0.9169,\"energy\":0.7256,\"tax\":0.1913,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2021-12-29T18:00:00.000+01:00\"},{\"total\":0.9213,\"energy\":0.729,\"tax\":0.1923,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2021-12-29T19:00:00.000+01:00\"},{\"total\":0.9084,\"energy\":0.7188,\"tax\":0.1896,\"currency\":\"NOK\",\"level\":\"EXPENSIVE\",\"startsAt\":\"2021-12-29T20:00:00.000+01:00\"},{\"total\":0.8912,\"energy\":0.705,\"tax\":0.1862,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T21:00:00.000+01:00\"},{\"total\":0.8124,\"energy\":0.6419,\"tax\":0.1705,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T22:00:00.000+01:00\"},{\"total\":0.794,\"energy\":0.6272,\"tax\":0.1668,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-29T23:00:00.000+01:00\"}],\"tomorrow\":[{\"total\":0.7556,\"energy\":0.5965,\"tax\":0.1591,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T00:00:00.000+01:00\"},{\"total\":0.6074,\"energy\":0.478,\"tax\":0.1294,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2021-12-30T01:00:00.000+01:00\"},{\"total\":0.4234,\"energy\":0.3308,\"tax\":0.0926,\"currency\":\"NOK\",\"level\":\"VERY_CHEAP\",\"startsAt\":\"2021-12-30T02:00:00.000+01:00\"},{\"total\":0.3319,\"energy\":0.2576,\"tax\":0.0743,\"currency\":\"NOK\",\"level\":\"VERY_CHEAP\",\"startsAt\":\"2021-12-30T03:00:00.000+01:00\"},{\"total\":0.3575,\"energy\":0.278,\"tax\":0.0795,\"currency\":\"NOK\",\"level\":\"VERY_CHEAP\",\"startsAt\":\"2021-12-30T04:00:00.000+01:00\"},{\"total\":0.535,\"energy\":0.42,\"tax\":0.115,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2021-12-30T05:00:00.000+01:00\"},{\"total\":0.6912,\"energy\":0.545,\"tax\":0.1462,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2021-12-30T06:00:00.000+01:00\"},{\"total\":0.7113,\"energy\":0.561,\"tax\":0.1503,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T07:00:00.000+01:00\"},{\"total\":0.7127,\"energy\":0.5621,\"tax\":0.1506,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T08:00:00.000+01:00\"},{\"total\":0.7204,\"energy\":0.5683,\"tax\":0.1521,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T09:00:00.000+01:00\"},{\"total\":0.74,\"energy\":0.584,\"tax\":0.156,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T10:00:00.000+01:00\"},{\"total\":0.7538,\"energy\":0.595,\"tax\":0.1588,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T11:00:00.000+01:00\"},{\"total\":0.7731,\"energy\":0.6105,\"tax\":0.1626,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T12:00:00.000+01:00\"},{\"total\":0.8032,\"energy\":0.6345,\"tax\":0.1687,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T13:00:00.000+01:00\"},{\"total\":0.8398,\"energy\":0.6638,\"tax\":0.176,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T14:00:00.000+01:00\"},{\"total\":0.8537,\"energy\":0.675,\"tax\":0.1787,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T15:00:00.000+01:00\"},{\"total\":0.8559,\"energy\":0.6767,\"tax\":0.1792,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T16:00:00.000+01:00\"},{\"total\":0.8365,\"energy\":0.6612,\"tax\":0.1753,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T17:00:00.000+01:00\"},{\"total\":0.806,\"energy\":0.6368,\"tax\":0.1692,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T18:00:00.000+01:00\"},{\"total\":0.7701,\"energy\":0.6081,\"tax\":0.162,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T19:00:00.000+01:00\"},{\"total\":0.6914,\"energy\":0.5452,\"tax\":0.1462,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2021-12-30T20:00:00.000+01:00\"},{\"total\":0.6966,\"energy\":0.5493,\"tax\":0.1473,\"currency\":\"NOK\",\"level\":\"NORMAL\",\"startsAt\":\"2021-12-30T21:00:00.000+01:00\"},{\"total\":0.6778,\"energy\":0.5343,\"tax\":0.1435,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2021-12-30T22:00:00.000+01:00\"},{\"total\":0.6358,\"energy\":0.5006,\"tax\":0.1352,\"currency\":\"NOK\",\"level\":\"CHEAP\",\"startsAt\":\"2021-12-30T23:00:00.000+01:00\"}]}}}]}}}'\n \n  jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table \n  \n  self:getValues()\n  self:updateLabels()\n  self:updateProperties()\n  self:updateChildDevices() \n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:getData()\n  local url = \"https://api.tibber.com/v1-beta/gql\"\n  local requestBody = '{\"query\": \"{viewer{homes {hourly:consumption(resolution: HOURLY, last: 1) {nodes {from to cost unitPrice unitPriceVAT consumption consumptionUnit}}daily:consumption(resolution: DAILY, last: 1) {nodes {from to cost unitPrice unitPriceVAT consumption consumptionUnit}} yearly:consumption(resolution: ANNUAL, last: 1) {nodes {from to cost unitPrice unitPriceVAT consumption consumptionUnit}}currentSubscription {status priceInfo {current {total energy tax currency level startsAt} today{total energy tax currency level startsAt} tomorrow{total energy tax currency level startsAt}}}}}}\"}'\n  \n  http:request(url, {\n    options = {\n      data = requestBody,\n      method = \"POST\",\n      headers = {\n        [\"Content-Type\"] = \"application/json\",\n        [\"Accept\"] = \"application/json\",\n        [\"Authorization\"] = \"Bearer \" ..token,\n      }\n    },\n    success = function(response) \n        self:logging(3,\"response status: \" ..response.status)\n        self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n        self:logging(2,\"Response data: \" ..response.data)\n\n        if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n          self:warning(\"Temporarily no production data from Tibber Monitor\")\n          self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n          fibaro.setTimeout(interval*1000, function() \n            self:getdata()\n          end)\n        end\n        \n        response.data = response.data:gsub(\"null\", \"0\") -- clean up the response.data by replacing null with 0\n        --self:logging(2,\"Response data withoot null: \" ..response.data)\n\n        jsonTable = json.decode(response.data) -- JSON decode from api to lua-table\n\n        self:getValues()\n        self:updateLabels()\n        self:updateProperties()\n        self:updateChildDevices() \n\n      end,\n      error = function(error)\n        self:error(\"error: \" ..json.encode(error))\n        self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n      end\n    }) \n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:getData()\n  end)\nend\n\n\nfunction QuickApp:createVariables() -- Create all Variables \n  jsonTable = {}\n  jsonPrices = {}\n  data = {}\n  data.hEnergy = 0 -- Hourly data\n  data.hCost = 0\n  data.hTax = 0\n  data.hPrice = 0\n  data.dEnergy = 0 -- Daily data\n  data.dCost = 0\n  data.dTax = 0\n  data.yEnergy = 0 -- Yearly data\n  data.yCost = 0\n  data.yTax = 0\n  data.minPrice = 0 -- Min/Max Price\n  data.minLevel = \"\"\n  data.minStartsAt = \"\"\n  data.maxPrice = 0\n  data.maxLevel = \"\"\n  data.maxStartsAt = \"\"\n  data.h1Percentage = 0 -- Percentage\n  data.h2Percentage = 0\n  data.h3Percentage = 0\n  data.h4Percentage = 0\n  data.h5Percentage = 0\n  data.tPrice = 0 -- Current Price\n  data.gPrice = 0\n  data.currency = \"\"\n  data.level = \"\"\n  data.tax = 0  \n  data.startsAt = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all Quickapp Variables or create them\n  token = self:getVariable(\"token\")\n  extraCost = tonumber(self:getVariable(\"extraCost\")) \n  interval = tonumber(self:getVariable(\"interval\")) \n  httpTimeout = tonumber(self:getVariable(\"httpTimeout\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n  setGlobalVar = self:getVariable(\"setGlobalVar\")\n\n  -- Check existence of the mandatory variables, if not, create them with default values\n  if token == \"\" or token == nil then\n    token = \"476c477d8a039529478ebd690d35ddd80e3308ffc49b59c65b142321aee963a4\" -- This token is just an demo example, only for demo purpose\n    self:setVariable(\"token\",token)\n    self:trace(\"Added QuickApp variable with DEMO (!) token\")\n  end\n  if extraCost == \"\" or extraCost == nil then\n    extraCost = \"0\"\n    self:setVariable(\"extraCost\",extraCost)\n    self:trace(\"Added QuickApp variable extraCost\")\n    extraCost = tonumber(extraCost)\n  end\n  if interval == \"\" or interval == nil then\n    interval = \"3600\" \n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end\n  if httpTimeout == \"\" or httpTimeout == nil then\n    httpTimeout = \"5\" -- Default http timeout \n    self:setVariable(\"httpTimeout\",httpTimeout)\n    self:trace(\"Added QuickApp variable httpTimeout\")\n    httpTimeout = tonumber(httpTimeout)\n  end \n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default debug level\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if setGlobalVar == \"\" or setGlobalVar == nil then \n    setGlobalVar = false -- Default SetGlobalVar is falso (No use of Global Variables)\n    self:setVariable(\"setGlobalVar\",tostring(setGlobalVar))\n    self:trace(\"Added QuickApp variable setGlobalVar\")\n  end\n  if setGlobalVar == \"true\" then \n    setGlobalVar = true \n  else\n    setGlobalVar = false\n  end\n  if token == nil or token == \"\"  or token == \"0\" then -- Check mandatory token \n    self:error(\"Token is empty! Get your token from the Tibber website and copy the token to the quickapp variable\")\n    self:warning(\"No token Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty token\n  end\nend\n  \n\nfunction QuickApp:setupChildDevices() -- Setup Child Devices\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n    local initChildData = { \n      {className=\"hEnergy\", name=\"Hourly Energy\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"hCost\", name=\"Hourly Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"dEnergy\", name=\"Daily Energy\", type=\"com.fibaro.energyMeter\"}, -- Device for Energy Panel\n      {className=\"dCost\", name=\"Daily Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"yEnergy\", name=\"Yearly Energy\", type=\"com.fibaro.multilevelSensor\"}, \n      {className=\"yCost\", name=\"Yearly Cost\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"hPrice\", name=\"Current Price\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"minPrice\", name=\"Minimum Price\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"maxPrice\", name=\"Maximum Price\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h1Percentage\", name=\"+1 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h2Percentage\", name=\"+2 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h3Percentage\", name=\"+3 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h4Percentage\", name=\"+4 hour\", type=\"com.fibaro.multilevelSensor\"},\n      {className=\"h5Percentage\", name=\"+5 hour\", type=\"com.fibaro.multilevelSensor\"},\n    }\n    for _,c in ipairs(initChildData) do\n      local ips = UI and self:makeInitialUIProperties(UI or {}) or {}\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          properties = {viewLayout = ips.viewLayout, uiCallbacks = ips.uiCallbacks},\n          interfaces = {\"quickApp\"}, \n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className) -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\") \n\n  self:setupChildDevices() -- Setup the Child Devices\n\n  if not api.get(\"/devices/\"..self.id).enabled then\n    self:warning(\"Device\", fibaro.getName(plugin.mainDeviceId), \"is disabled\")\n    return\n  end\n  \n  self:getQuickAppVariables() \n  self:createVariables()\n  \n  http = net.HTTPClient({timeout=httpTimeout*1000})\n  \n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getData() -- Get data from the Tibber platform\n  end\nend\n\n-- EOF "}]}